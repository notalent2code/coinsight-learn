# syntax=docker/dockerfile:1
FROM maven:3.9-amazoncorretto-17 AS builder

WORKDIR /app

# Copy only POM files first for dependency caching
COPY pom.xml .
COPY common/pom.xml ./common/
COPY budget-service/pom.xml ./budget-service/

# Download dependencies with cache mount - this layer will be cached unless POMs change
RUN --mount=type=cache,target=/root/.m2 \
    --mount=type=cache,target=/tmp/maven-build \
    mvn dependency:go-offline -pl budget-service -am

# Copy source code after dependencies are cached
COPY common/src ./common/src
COPY budget-service/src ./budget-service/src

# Build application using cached dependencies
RUN --mount=type=cache,target=/root/.m2 \
    --mount=type=cache,target=/tmp/maven-build \
    mvn clean package -pl budget-service -am -DskipTests -Dmaven.repo.local=/root/.m2

# Runtime stage - smaller, more secure image
FROM amazoncorretto:17-alpine3.19

WORKDIR /app

# Install curl for health checks (if needed)
RUN apk add --no-cache curl

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Copy JAR file from builder stage
COPY --from=builder --chown=appuser:appgroup /app/budget-service/target/budget-service-*.jar app.jar

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8084

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8084/actuator/health || exit 1

# JVM optimizations for containerized environment
ENTRYPOINT ["java", \
    "-XX:+UseContainerSupport", \
    "-XX:MaxRAMPercentage=75.0", \
    "-XX:+OptimizeStringConcat", \
    "-XX:+UseStringDeduplication", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-jar", "app.jar"]
