# Coinsight Platform Configuration
# This file contains default values for the Coinsight microservices platform

# Kubernetes-native configuration management
configMaps:
  enabled: true

secrets:
  enabled: true
  # Database credentials
  database:
    username: "postgres"
    password: "postgres"
  
  # Keycloak client secrets
  keycloak:
    authServiceSecret: "OgRK7as6bjDxNKT5qpAbAtaMKsg7c1bh"
    budgetServiceSecret: "WiDKoqXBrEbkDjc6viFlAIHZFmu2M7vg"
    notificationServiceSecret: "HmPlEAIi4rJA5VZAnCX822wEjdXaXc8o"
    gatewayClientSecret: "qjcqpzF7tYmhGitMMQXOIJcmVJrJ2xPC"
    ocrServiceSecret: "epNXpJWhzUqwH87VxspGLXh2hgC2mBkn"
    transactionServiceSecret: "61fkBYf9jBS4tT3hcSYtoKA75pr0BcKn"
  
  # Azure API keys (replace with your actual keys)
  azure:
    formRecognizerApiKey: "2G2FhKKSMQIGInRgpEYKYZIrsHeJKPLPrLS9e6vnSJgu4LJwFM0tJQQJ99BEACqBBLyXJ3w3AAAAACOG0aZg"
    openaiApiKey: "1IqZw7IsgY8qzgwH3XAxcEGp7qBCQThKmmo8VJVIL0Ics6jwZbScJQQJ99BEACHYHv6XJ3w3AAAAACOGxchg"
  
  # Mail credentials
  mail:
    username: ""
    password: ""

# External service configuration
coinsightRealm: "coinsight-realm"

# Database Initialization
dbInit:
  enabled: true

azure:
  formRecognizer:
    endpoint: "https://coinsight-ocr.cognitiveservices.azure.com/"
  openai:
    endpoint: "https://rihla-maz4futt-eastus2.cognitiveservices.azure.com/"
    deploymentId: "gpt-4.1"

mail:
  host: "coinsight-platform-mailhog.coinsight.svc.cluster.local"
  port: "1025"

# MailHog for development email testing
mailhog:
  enabled: true
  image:
    repository: "mailhog/mailhog"
    tag: "v1.0.1"
    pullPolicy: IfNotPresent
  service:
    type: NodePort
    nodePort: 31025  # MailHog web UI accessible at http://localhost:31025
  resources:
    requests:
      memory: "32Mi"
      cpu: "10m"
    limits:
      memory: "64Mi"
      cpu: "50m"

global:
  namespace: "coinsight"

  # Global image settings
  image:
    registry: "docker.io"
    pullPolicy: IfNotPresent
    tag: "latest"
  
  # Global security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  
  # Resource limits (optimized for faster startup)
  resources:
    limits:
      memory: "1Gi"
      cpu: "1000m"

# Infrastructure Dependencies
postgres-auth:
  enabled: true
  auth:
    database: "auth_service"
    username: "postgres"
    password: "postgres"
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

postgres-transaction:
  enabled: true
  auth:
    database: "transaction_service"
    username: "postgres"
    password: "postgres"
  primary:
    persistence:
      size: 2Gi
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

postgres-budget:
  enabled: true
  auth:
    database: "budget_service"
    username: "postgres"
    password: "postgres"
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"

postgres-notification:
  enabled: true
  auth:
    database: "notification_service"
    username: "postgres"
    password: "postgres"
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"

postgres-keycloak:
  enabled: true
  auth:
    database: "keycloak"
    username: "postgres"
    password: "postgres"
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "300m"

kafka:
  enabled: true
  kraft:
    enabled: true
  controller:
    replicaCount: 1
    resources:
      requests:
        memory: "512Mi"  # Increased from 128Mi
        cpu: "100m"      # Increased from 50m
      limits:
        memory: "1Gi"    # Increased from 256Mi
        cpu: "500m"      # Increased from 200m
    persistence:
      size: 2Gi
    # Fix readiness and liveness probes to use correct port
    readinessProbe:
      tcpSocket:
        port: 9092  # Use client port instead of controller port
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 6
    livenessProbe:
      tcpSocket:
        port: 9092  # Use client port instead of controller port
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 6
  broker:
    replicaCount: 1
    resources:
      requests:
        memory: "512Mi"  # Increased from 128Mi
        cpu: "100m"      # Increased from 50m
      limits:
        memory: "1Gi"    # Increased from 256Mi
        cpu: "500m"      # Increased from 200m
    persistence:
      size: 2Gi
    # Fix readiness and liveness probes to use correct port
    readinessProbe:
      tcpSocket:
        port: 9092  # Use client port instead of controller port
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 6
    livenessProbe:
      tcpSocket:
        port: 9092  # Use client port instead of controller port
      initialDelaySeconds: 30
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 6
  # Add additional KRaft-specific configuration
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
  service:
    ports:
      client: 9092
  # Ensure proper Java heap settings for limited resources
  heapOpts: "-Xmx512m -Xms512m"
  # Additional KRaft configuration
  extraConfig: |
    # Optimize for single-node development
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    num.partitions=1
    default.replication.factor=1
    min.insync.replicas=1
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    # Override advertised listeners to use the service name
    advertised.listeners=CLIENT://coinsight-platform-kafka.coinsight.svc.cluster.local:9092,INTERNAL://coinsight-platform-kafka-broker-0.coinsight-platform-kafka-broker-headless.coinsight.svc.cluster.local:9094

redis:
  enabled: true
  auth:
    enabled: false
  master:
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    persistence:
      size: 1Gi

keycloak:
  enabled: true
  auth:
    adminUser: "admin"
    adminPassword: "admin"
  service:
    type: NodePort
    nodePorts:
      http: 30090
  postgresql:
    enabled: false  # We use our own postgres-keycloak
  externalDatabase:
    host: "coinsight-platform-postgres-keycloak"
    port: 5432
    user: "postgres"
    password: "postgres"
    database: "keycloak"
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"

# Microservices Configuration
microservices:
  # Config Server - DISABLED (migrated to ConfigMaps/Secrets)
  # configServer:
  #   enabled: false
  #   image:
  #     repository: "coinsight/config-server"
  #     tag: "latest"
  #   service:
  #     port: 8888
  #   resources:
  #     requests:
  #       memory: "128Mi"
  #       cpu: "50m"
  #     limits:
  #       memory: "256Mi"
  #       cpu: "200m"

  # Auth Service
  authService:
    enabled: true
    image:
      repository: "coinsight/auth-service"
      tag: "latest"
    service:
      port: 8081
    database:
      host: "coinsight-platform-postgres-auth"
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  # Transaction Service
  transactionService:
    enabled: true
    image:
      repository: "coinsight/transaction-service"
      tag: "latest"
    service:
      port: 8082
    database:
      host: "coinsight-platform-postgres-transaction"
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  # OCR Service
  ocrService:
    enabled: true
    image:
      repository: "coinsight/ocr-service"
      tag: "latest"
    service:
      port: 8083
    resources:
      requests:
        memory: "1Gi"
        cpu: "300m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

  # Budget Service
  budgetService:
    enabled: true
    image:
      repository: "coinsight/budget-service"
      tag: "latest"
    service:
      port: 8084
    database:
      host: "coinsight-platform-postgres-budget"
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  # Notification Service
  notificationService:
    enabled: true
    image:
      repository: "coinsight/notification-service"
      tag: "latest"
    service:
      port: 8085
    database:
      host: "coinsight-platform-postgres-notification"
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  # Gateway Service - API Gateway
  gatewayService:
    enabled: true
    image:
      repository: "coinsight/gateway-service"
      tag: "latest"
    service:
      port: 8080
      type: NodePort
      nodePort: 30080
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: coinsight.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: gateway-service
              port:
                number: 8080

# Monitoring (optional, can be enabled later)
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false
