server:
  port: 8080

spring:
  # Add Redis configuration for rate limiting
  data:
    redis:
      host: ${REDIS_HOST:coinsight-platform-redis-master.coinsight.svc.cluster.local}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms

  cloud:
    gateway:
      routes:
        - id: welcome-route
          uri: ${GATEWAY_URL:http://localhost:8080}
          predicates:
            - Path=/
          filters:
            - SetPath=/

        - id: public-auth-routes
          uri: ${AUTH_SERVICE_URL:http://auth-service.coinsight.svc.cluster.local:8081}
          predicates:
            - Path=/api/auth/login,/api/auth/register
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@ipKeyResolver}"

         # Test routes
        - id: test-routes
          uri: ${GATEWAY_URL:http://localhost:8080}
          predicates:
            - Path=/test/**

        - id: test-token-relay
          uri: ${AUTH_SERVICE_URL:http://auth-service.coinsight.svc.cluster.local:8081}
          predicates:
            - Path=/api/relay-test/**
          filters:
            - TokenRelay

        - id: auth-service
          uri: ${AUTH_SERVICE_URL:http://auth-service.coinsight.svc.cluster.local:8081}
          predicates:
            - Path=/api/auth/**
          filters:
            - TokenRelay
            - name: CircuitBreaker
              args:
                name: authServiceCircuitBreaker
                fallbackUri: forward:/fallback/auth
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

        - id: transaction-service
          uri: ${TRANSACTION_SERVICE_URL:http://transaction-service.coinsight.svc.cluster.local:8082}
          predicates:
            - Path=/api/transactions/**
          filters:
            - TokenRelay
            - name: CircuitBreaker
              args:
                name: transactionServiceCircuitBreaker
                fallbackUri: forward:/fallback/transaction
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 15
                redis-rate-limiter.burstCapacity: 30
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        
        - id: ocr-service
          uri: ${OCR_SERVICE_URL:http://ocr-service.coinsight.svc.cluster.local:8083}
          predicates:
            - Path=/api/ocr/**
          filters:
            - TokenRelay
            # - name: CircuitBreaker
            #   args:
            #     name: ocrServiceCircuitBreaker
            #     fallbackUri: forward:/fallback/ocr
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2
                redis-rate-limiter.burstCapacity: 5
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

        # Budget Service Routes
        - id: budget-service
          uri: ${BUDGET_SERVICE_URL:http://budget-service.coinsight.svc.cluster.local:8084}
          predicates:
            - Path=/api/budgets/**
          filters:
            - TokenRelay
            - name: CircuitBreaker
              args:
                name: budgetServiceCircuitBreaker
                fallbackUri: forward:/fallback/budget
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

        # Notification Service Routes
        - id: notification-service
          uri: ${NOTIFICATION_SERVICE_URL:http://notification-service.coinsight.svc.cluster.local:8085}
          predicates:
            - Path=/api/notifications/**
          filters:
            - TokenRelay
            - name: CircuitBreaker
              args:
                name: notificationServiceCircuitBreaker
                fallbackUri: forward:/fallback/notification
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: coinsight-app
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            scope: openid
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_URL:http://coinsight-platform-keycloak.coinsight.svc.cluster.local}/realms/coinsight-realm
            user-name-attribute: preferred_username
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_URL:http://coinsight-platform-keycloak.coinsight.svc.cluster.local}/realms/coinsight-realm

resilience4j:
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2000
        permittedNumberOfCallsInHalfOpenState: 5
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 30000
    instances:
      authServiceCircuitBreaker:
        baseConfig: default
      transactionServiceCircuitBreaker:
        baseConfig: default
      ocrServiceCircuitBreaker:
        baseConfig: default
      budgetServiceCircuitBreaker:
        baseConfig: default
      notificationServiceCircuitBreaker:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeoutDuration: 4s
    instances:
      authServiceCircuitBreaker:
        baseConfig: default
      transactionServiceCircuitBreaker:
        baseConfig: default
      ocrServiceCircuitBreaker:
        baseConfig: default
      budgetServiceCircuitBreaker:
        baseConfig: default
      notificationServiceCircuitBreaker:
        baseConfig: default